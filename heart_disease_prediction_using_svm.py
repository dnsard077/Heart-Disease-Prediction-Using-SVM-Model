# -*- coding: utf-8 -*-
"""Heart Disease Prediction Using SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GUg6iGLrOS6Z_Ab5MEvXbteBs12OjY8-
"""

# Commented out IPython magic to ensure Python compatibility.
# predicting heart disease with SVM
# import libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns

# dataset link : https://www.kaggle.com/ronitf/heart-disease-uci
# import dataset
df = pd.read_csv("/content/heart.csv")
df.shape

# show the samples data
df.head()

#show data types of each columns
df.dtypes

# visualize correlation each columns with target
sns.pairplot(df, hue='target')

# split data target and features
y = df.target.values
x_data = df.drop(['target'], axis = 1)
# Normalize data
x = (x_data - np.min(x_data)) / (np.max(x_data) - np.min(x_data)).values

# split data to train and test with 20% splitted to test
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state=0)

# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

# Making model
from sklearn.svm import SVC
classifier = SVC(kernel='sigmoid')
classifier.fit(x_train, y_train)
y_pred = classifier.predict(x_test)

# show confusion matrix and accuracy
from sklearn.metrics import confusion_matrix, classification_report
print(confusion_matrix(y_test, y_pred))
print("\n")
print(classification_report(y_test, y_pred))

# implementing gridsearch for hyperparameter tuning
from sklearn.model_selection import GridSearchCV

#define paramater that will be used
param_grid = {'C' : [0.0001, 0.001, 0.1 , 1, 10, 100, 1000, 10000], 
              'gamma' : [1000, 100, 10 ,1, 0, 0.1, 0.01, 0.001, 0.0001, 0.00001],
              'kernel' : ['linear',  'rbf', 'sigmoid']}
# trying all the parameters and find the best
grid = GridSearchCV(SVC(), param_grid, verbose=3)

grid.fit(x_train, y_train)

# show the best parameter
grid.best_params_

# making prediction
grid_predictions = grid.predict(x_test)

# show confusion matrix and accuracy
print(confusion_matrix(y_test, grid_predictions))
print("\n")
print(classification_report(y_test, grid_predictions))

